//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Date:04/21/2020 08:16:42
//     Runtime Version:3.1.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Reflection;
using System.Threading;
using System.Threading.Tasks;
using Scriban.Helpers;
using Scriban.Parsing;
using Scriban.Runtime;
using Scriban.Syntax;
using System.Numerics;

namespace Scriban.Syntax
{
    public partial class ScriptAnonymousFunction
    {
        public override int ChildrenCount => 1;

        protected override ScriptNode GetChildrenImpl(int index) => Function;
        public override void Accept(ScriptVisitor visitor) => visitor.Visit(this);
        public override TResult Accept<TResult>(ScriptVisitor<TResult> visitor) => visitor.Visit(this);
    }

    public partial class ScriptArgumentBinary
    {
        public override int ChildrenCount => 1;

        protected override ScriptNode GetChildrenImpl(int index) => OperatorToken;
        public override void Accept(ScriptVisitor visitor) => visitor.Visit(this);
        public override TResult Accept<TResult>(ScriptVisitor<TResult> visitor) => visitor.Visit(this);
    }

    public partial class ScriptArrayInitializerExpression
    {
        public override int ChildrenCount => 3;

        protected override ScriptNode GetChildrenImpl(int index)
        {
            return index switch
            {
                0 => OpenBracketToken,
                1 => Values,
                2 => CloseBracketToken,
                _ => null
            };
        }

        public override void Accept(ScriptVisitor visitor) => visitor.Visit(this);
        public override TResult Accept<TResult>(ScriptVisitor<TResult> visitor) => visitor.Visit(this);
    }

    public partial class ScriptAssignExpression
    {
        public override int ChildrenCount => 3;

        protected override ScriptNode GetChildrenImpl(int index)
        {
            return index switch
            {
                0 => Target,
                1 => EqualToken,
                2 => Value,
                _ => null
            };
        }

        public override void Accept(ScriptVisitor visitor) => visitor.Visit(this);
        public override TResult Accept<TResult>(ScriptVisitor<TResult> visitor) => visitor.Visit(this);
    }

    public partial class ScriptBinaryExpression
    {
        public override int ChildrenCount => 3;

        protected override ScriptNode GetChildrenImpl(int index)
        {
            return index switch
            {
                0 => Left,
                1 => OperatorToken,
                2 => Right,
                _ => null
            };
        }

        public override void Accept(ScriptVisitor visitor) => visitor.Visit(this);
        public override TResult Accept<TResult>(ScriptVisitor<TResult> visitor) => visitor.Visit(this);
    }

    public partial class ScriptBlockStatement
    {
        public override int ChildrenCount => 1;

        protected override ScriptNode GetChildrenImpl(int index) => Statements;
        public override void Accept(ScriptVisitor visitor) => visitor.Visit(this);
        public override TResult Accept<TResult>(ScriptVisitor<TResult> visitor) => visitor.Visit(this);
    }

    public partial class ScriptBreakStatement
    {
        public override int ChildrenCount => 0;

        protected override ScriptNode GetChildrenImpl(int index) => null;
        public override void Accept(ScriptVisitor visitor) => visitor.Visit(this);
        public override TResult Accept<TResult>(ScriptVisitor<TResult> visitor) => visitor.Visit(this);
    }

    public partial class ScriptCaptureStatement
    {
        public override int ChildrenCount => 2;

        protected override ScriptNode GetChildrenImpl(int index)
        {
            return index switch
            {
                0 => Target,
                1 => Body,
                _ => null
            };
        }

        public override void Accept(ScriptVisitor visitor) => visitor.Visit(this);
        public override TResult Accept<TResult>(ScriptVisitor<TResult> visitor) => visitor.Visit(this);
    }

    public partial class ScriptCaseStatement
    {
        public override int ChildrenCount => 2;

        protected override ScriptNode GetChildrenImpl(int index)
        {
            return index switch
            {
                0 => Value,
                1 => Body,
                _ => null
            };
        }

        public override void Accept(ScriptVisitor visitor) => visitor.Visit(this);
        public override TResult Accept<TResult>(ScriptVisitor<TResult> visitor) => visitor.Visit(this);
    }

    public partial class ScriptContinueStatement
    {
        public override int ChildrenCount => 0;

        protected override ScriptNode GetChildrenImpl(int index) => null;
        public override void Accept(ScriptVisitor visitor) => visitor.Visit(this);
        public override TResult Accept<TResult>(ScriptVisitor<TResult> visitor) => visitor.Visit(this);
    }

    public partial class ScriptElseStatement
    {
        public override int ChildrenCount => 2;

        protected override ScriptNode GetChildrenImpl(int index)
        {
            return index switch
            {
                0 => Body,
                1 => Else,
                _ => null
            };
        }

        public override void Accept(ScriptVisitor visitor) => visitor.Visit(this);
        public override TResult Accept<TResult>(ScriptVisitor<TResult> visitor) => visitor.Visit(this);
    }

    public partial class ScriptExpressionStatement
    {
        public override int ChildrenCount => 1;

        protected override ScriptNode GetChildrenImpl(int index) => Expression;
        public override void Accept(ScriptVisitor visitor) => visitor.Visit(this);
        public override TResult Accept<TResult>(ScriptVisitor<TResult> visitor) => visitor.Visit(this);
    }

    public partial class ScriptForStatement
    {
        public override int ChildrenCount => 4;

        protected override ScriptNode GetChildrenImpl(int index)
        {
            return index switch
            {
                0 => Body,
                1 => Variable,
                2 => Iterator,
                3 => NamedArguments,
                _ => null
            };
        }

        public override void Accept(ScriptVisitor visitor) => visitor.Visit(this);
        public override TResult Accept<TResult>(ScriptVisitor<TResult> visitor) => visitor.Visit(this);
    }

    public partial class ScriptFunction
    {
        public override int ChildrenCount => 6;

        protected override ScriptNode GetChildrenImpl(int index)
        {
            return index switch
            {
                0 => NameOrDoToken,
                1 => OpenParen,
                2 => Parameters,
                3 => CloseParen,
                4 => EqualToken,
                5 => Body,
                _ => null
            };
        }

        public override void Accept(ScriptVisitor visitor) => visitor.Visit(this);
        public override TResult Accept<TResult>(ScriptVisitor<TResult> visitor) => visitor.Visit(this);
    }

    public partial class ScriptFunctionCall
    {
        public override int ChildrenCount => 4;

        protected override ScriptNode GetChildrenImpl(int index)
        {
            return index switch
            {
                0 => Target,
                1 => OpenParent,
                2 => Arguments,
                3 => CloseParen,
                _ => null
            };
        }

        public override void Accept(ScriptVisitor visitor) => visitor.Visit(this);
        public override TResult Accept<TResult>(ScriptVisitor<TResult> visitor) => visitor.Visit(this);
    }

    public partial class ScriptIfStatement
    {
        public override int ChildrenCount => 3;

        protected override ScriptNode GetChildrenImpl(int index)
        {
            return index switch
            {
                0 => Condition,
                1 => Then,
                2 => Else,
                _ => null
            };
        }

        public override void Accept(ScriptVisitor visitor) => visitor.Visit(this);
        public override TResult Accept<TResult>(ScriptVisitor<TResult> visitor) => visitor.Visit(this);
    }

    public partial class ScriptImportStatement
    {
        public override int ChildrenCount => 1;

        protected override ScriptNode GetChildrenImpl(int index) => Expression;
        public override void Accept(ScriptVisitor visitor) => visitor.Visit(this);
        public override TResult Accept<TResult>(ScriptVisitor<TResult> visitor) => visitor.Visit(this);
    }

    public partial class ScriptIndexerExpression
    {
        public override int ChildrenCount => 2;

        protected override ScriptNode GetChildrenImpl(int index)
        {
            return index switch
            {
                0 => Target,
                1 => Index,
                _ => null
            };
        }

        public override void Accept(ScriptVisitor visitor) => visitor.Visit(this);
        public override TResult Accept<TResult>(ScriptVisitor<TResult> visitor) => visitor.Visit(this);
    }

    public partial class ScriptIsEmptyExpression
    {
        public override int ChildrenCount => 1;

        protected override ScriptNode GetChildrenImpl(int index) => Target;
        public override void Accept(ScriptVisitor visitor) => visitor.Visit(this);
        public override TResult Accept<TResult>(ScriptVisitor<TResult> visitor) => visitor.Visit(this);
    }

    public partial class ScriptLiteral
    {
        public override int ChildrenCount => 0;

        protected override ScriptNode GetChildrenImpl(int index) => null;
        public override void Accept(ScriptVisitor visitor) => visitor.Visit(this);
        public override TResult Accept<TResult>(ScriptVisitor<TResult> visitor) => visitor.Visit(this);
    }

    public partial class ScriptMemberExpression
    {
        public override int ChildrenCount => 2;

        protected override ScriptNode GetChildrenImpl(int index)
        {
            return index switch
            {
                0 => Target,
                1 => Member,
                _ => null
            };
        }

        public override void Accept(ScriptVisitor visitor) => visitor.Visit(this);
        public override TResult Accept<TResult>(ScriptVisitor<TResult> visitor) => visitor.Visit(this);
    }

    public partial class ScriptNamedArgument
    {
        public override int ChildrenCount => 1;

        protected override ScriptNode GetChildrenImpl(int index) => Value;
        public override void Accept(ScriptVisitor visitor) => visitor.Visit(this);
        public override TResult Accept<TResult>(ScriptVisitor<TResult> visitor) => visitor.Visit(this);
    }

    public partial class ScriptNestedExpression
    {
        public override int ChildrenCount => 1;

        protected override ScriptNode GetChildrenImpl(int index) => Expression;
        public override void Accept(ScriptVisitor visitor) => visitor.Visit(this);
        public override TResult Accept<TResult>(ScriptVisitor<TResult> visitor) => visitor.Visit(this);
    }

    public partial class ScriptNopStatement
    {
        public override int ChildrenCount => 0;

        protected override ScriptNode GetChildrenImpl(int index) => null;
        public override void Accept(ScriptVisitor visitor) => visitor.Visit(this);
        public override TResult Accept<TResult>(ScriptVisitor<TResult> visitor) => visitor.Visit(this);
    }

    public partial class ScriptObjectInitializerExpression
    {
        public override int ChildrenCount => 1;

        protected override ScriptNode GetChildrenImpl(int index) => Members;
        public override void Accept(ScriptVisitor visitor) => visitor.Visit(this);
        public override TResult Accept<TResult>(ScriptVisitor<TResult> visitor) => visitor.Visit(this);
    }

    public partial class ScriptObjectMember
    {
        public override int ChildrenCount => 2;

        protected override ScriptNode GetChildrenImpl(int index)
        {
            return index switch
            {
                0 => Name,
                1 => Value,
                _ => null
            };
        }

        public override void Accept(ScriptVisitor visitor) => visitor.Visit(this);
        public override TResult Accept<TResult>(ScriptVisitor<TResult> visitor) => visitor.Visit(this);
    }

    public partial class ScriptPage
    {
        public override int ChildrenCount => 2;

        protected override ScriptNode GetChildrenImpl(int index)
        {
            return index switch
            {
                0 => FrontMatter,
                1 => Body,
                _ => null
            };
        }

        public override void Accept(ScriptVisitor visitor) => visitor.Visit(this);
        public override TResult Accept<TResult>(ScriptVisitor<TResult> visitor) => visitor.Visit(this);
    }

    public partial class ScriptPipeCall
    {
        public override int ChildrenCount => 3;

        protected override ScriptNode GetChildrenImpl(int index)
        {
            return index switch
            {
                0 => From,
                1 => PipeToken,
                2 => To,
                _ => null
            };
        }

        public override void Accept(ScriptVisitor visitor) => visitor.Visit(this);
        public override TResult Accept<TResult>(ScriptVisitor<TResult> visitor) => visitor.Visit(this);
    }

    public partial class ScriptRawStatement
    {
        public override int ChildrenCount => 0;

        protected override ScriptNode GetChildrenImpl(int index) => null;
        public override void Accept(ScriptVisitor visitor) => visitor.Visit(this);
        public override TResult Accept<TResult>(ScriptVisitor<TResult> visitor) => visitor.Visit(this);
    }

    public partial class ScriptReadOnlyStatement
    {
        public override int ChildrenCount => 1;

        protected override ScriptNode GetChildrenImpl(int index) => Variable;
        public override void Accept(ScriptVisitor visitor) => visitor.Visit(this);
        public override TResult Accept<TResult>(ScriptVisitor<TResult> visitor) => visitor.Visit(this);
    }

    public partial class ScriptReturnStatement
    {
        public override int ChildrenCount => 1;

        protected override ScriptNode GetChildrenImpl(int index) => Expression;
        public override void Accept(ScriptVisitor visitor) => visitor.Visit(this);
        public override TResult Accept<TResult>(ScriptVisitor<TResult> visitor) => visitor.Visit(this);
    }

    public abstract partial class ScriptRewriter
    {
        public override ScriptNode Visit(ScriptAnonymousFunction node)
        {
            var newFunction = (ScriptFunction)Visit((ScriptNode)node.Function);
            return new ScriptAnonymousFunction() { Function = newFunction };
        }

        public override ScriptNode Visit(ScriptArgumentBinary node)
        {
            var newOperatorToken = (ScriptToken)Visit((ScriptNode)node.OperatorToken);
            return new ScriptArgumentBinary() { Operator = node.Operator, OperatorToken = newOperatorToken };
        }

        public override ScriptNode Visit(ScriptArrayInitializerExpression node)
        {
            var newOpenBracketToken = (ScriptToken)Visit((ScriptNode)node.OpenBracketToken);
            var newValues = VisitAll(node.Values);
            var newCloseBracketToken = (ScriptToken)Visit((ScriptNode)node.CloseBracketToken);
            return new ScriptArrayInitializerExpression() { OpenBracketToken = newOpenBracketToken, Values = newValues, CloseBracketToken = newCloseBracketToken };
        }

        public override ScriptNode Visit(ScriptAssignExpression node)
        {
            var newTarget = (ScriptExpression)Visit((ScriptNode)node.Target);
            var newEqualToken = (ScriptToken)Visit((ScriptNode)node.EqualToken);
            var newValue = (ScriptExpression)Visit((ScriptNode)node.Value);
            return new ScriptAssignExpression() { Target = newTarget, EqualToken = newEqualToken, Value = newValue };
        }

        public override ScriptNode Visit(ScriptBinaryExpression node)
        {
            var newLeft = (ScriptExpression)Visit((ScriptNode)node.Left);
            var newOperatorToken = (ScriptToken)Visit((ScriptNode)node.OperatorToken);
            var newRight = (ScriptExpression)Visit((ScriptNode)node.Right);
            return new ScriptBinaryExpression() { Left = newLeft, Operator = node.Operator, OperatorToken = newOperatorToken, Right = newRight };
        }

        public override ScriptNode Visit(ScriptBlockStatement node)
        {
            var newStatements = VisitAll(node.Statements);
            return new ScriptBlockStatement() { Statements = newStatements };
        }

        public override ScriptNode Visit(ScriptBreakStatement node)
        {
            return new ScriptBreakStatement() { };
        }

        public override ScriptNode Visit(ScriptCaptureStatement node)
        {
            var newTarget = (ScriptExpression)Visit((ScriptNode)node.Target);
            var newBody = (ScriptBlockStatement)Visit((ScriptNode)node.Body);
            return new ScriptCaptureStatement() { Target = newTarget, Body = newBody };
        }

        public override ScriptNode Visit(ScriptCaseStatement node)
        {
            var newValue = (ScriptExpression)Visit((ScriptNode)node.Value);
            var newBody = (ScriptBlockStatement)Visit((ScriptNode)node.Body);
            return new ScriptCaseStatement() { Value = newValue, Body = newBody };
        }

        public override ScriptNode Visit(ScriptContinueStatement node)
        {
            return new ScriptContinueStatement() { };
        }

        public override ScriptNode Visit(ScriptElseStatement node)
        {
            var newBody = (ScriptBlockStatement)Visit((ScriptNode)node.Body);
            var newElse = (ScriptConditionStatement)Visit((ScriptNode)node.Else);
            return new ScriptElseStatement() { Body = newBody, Else = newElse };
        }

        public override ScriptNode Visit(ScriptExpressionStatement node)
        {
            var newExpression = (ScriptExpression)Visit((ScriptNode)node.Expression);
            return new ScriptExpressionStatement() { Expression = newExpression };
        }

        public override ScriptNode Visit(ScriptForStatement node)
        {
            var newBody = (ScriptBlockStatement)Visit((ScriptNode)node.Body);
            var newVariable = (ScriptExpression)Visit((ScriptNode)node.Variable);
            var newIterator = (ScriptExpression)Visit((ScriptNode)node.Iterator);
            var newNamedArguments = VisitAll(node.NamedArguments);
            return new ScriptForStatement() { Body = newBody, Variable = newVariable, Iterator = newIterator, NamedArguments = newNamedArguments };
        }

        public override ScriptNode Visit(ScriptFunction node)
        {
            var newNameOrDoToken = (ScriptNode)Visit((ScriptNode)node.NameOrDoToken);
            var newOpenParen = (ScriptToken)Visit((ScriptNode)node.OpenParen);
            var newParameters = VisitAll(node.Parameters);
            var newCloseParen = (ScriptToken)Visit((ScriptNode)node.CloseParen);
            var newEqualToken = (ScriptToken)Visit((ScriptNode)node.EqualToken);
            var newBody = (ScriptStatement)Visit((ScriptNode)node.Body);
            return new ScriptFunction() { NameOrDoToken = newNameOrDoToken, OpenParen = newOpenParen, Parameters = newParameters, CloseParen = newCloseParen, EqualToken = newEqualToken, Body = newBody };
        }

        public override ScriptNode Visit(ScriptFunctionCall node)
        {
            var newTarget = (ScriptExpression)Visit((ScriptNode)node.Target);
            var newOpenParent = (ScriptToken)Visit((ScriptNode)node.OpenParent);
            var newArguments = VisitAll(node.Arguments);
            var newCloseParen = (ScriptToken)Visit((ScriptNode)node.CloseParen);
            return new ScriptFunctionCall() { Target = newTarget, OpenParent = newOpenParent, Arguments = newArguments, CloseParen = newCloseParen, ExplicitCall = node.ExplicitCall };
        }

        public override ScriptNode Visit(ScriptIfStatement node)
        {
            var newCondition = (ScriptExpression)Visit((ScriptNode)node.Condition);
            var newThen = (ScriptBlockStatement)Visit((ScriptNode)node.Then);
            var newElse = (ScriptConditionStatement)Visit((ScriptNode)node.Else);
            return new ScriptIfStatement() { Condition = newCondition, InvertCondition = node.InvertCondition, Then = newThen, Else = newElse, IsElseIf = node.IsElseIf };
        }

        public override ScriptNode Visit(ScriptImportStatement node)
        {
            var newExpression = (ScriptExpression)Visit((ScriptNode)node.Expression);
            return new ScriptImportStatement() { Expression = newExpression };
        }

        public override ScriptNode Visit(ScriptIndexerExpression node)
        {
            var newTarget = (ScriptExpression)Visit((ScriptNode)node.Target);
            var newIndex = (ScriptExpression)Visit((ScriptNode)node.Index);
            return new ScriptIndexerExpression() { Target = newTarget, Index = newIndex };
        }

        public override ScriptNode Visit(ScriptIsEmptyExpression node)
        {
            var newTarget = (ScriptExpression)Visit((ScriptNode)node.Target);
            return new ScriptIsEmptyExpression() { Target = newTarget };
        }

        public override ScriptNode Visit(ScriptLiteral node)
        {
            return new ScriptLiteral() { Value = node.Value, StringQuoteType = node.StringQuoteType };
        }

        public override ScriptNode Visit(ScriptMemberExpression node)
        {
            var newTarget = (ScriptExpression)Visit((ScriptNode)node.Target);
            var newMember = (ScriptVariable)Visit((ScriptNode)node.Member);
            return new ScriptMemberExpression() { Target = newTarget, Member = newMember };
        }

        public override ScriptNode Visit(ScriptNamedArgument node)
        {
            var newValue = (ScriptExpression)Visit((ScriptNode)node.Value);
            return new ScriptNamedArgument() { Name = node.Name, Value = newValue };
        }

        public override ScriptNode Visit(ScriptNestedExpression node)
        {
            var newExpression = (ScriptExpression)Visit((ScriptNode)node.Expression);
            return new ScriptNestedExpression() { Expression = newExpression };
        }

        public override ScriptNode Visit(ScriptNopStatement node)
        {
            return new ScriptNopStatement() { };
        }

        public override ScriptNode Visit(ScriptObjectInitializerExpression node)
        {
            var newMembers = VisitAll(node.Members);
            return new ScriptObjectInitializerExpression() { Members = newMembers };
        }

        public override ScriptNode Visit(ScriptObjectMember node)
        {
            var newName = (ScriptExpression)Visit((ScriptNode)node.Name);
            var newValue = (ScriptExpression)Visit((ScriptNode)node.Value);
            return new ScriptObjectMember() { Name = newName, Value = newValue };
        }

        public override ScriptNode Visit(ScriptPage node)
        {
            var newFrontMatter = (ScriptBlockStatement)Visit((ScriptNode)node.FrontMatter);
            var newBody = (ScriptBlockStatement)Visit((ScriptNode)node.Body);
            return new ScriptPage() { FrontMatter = newFrontMatter, Body = newBody };
        }

        public override ScriptNode Visit(ScriptPipeCall node)
        {
            var newFrom = (ScriptExpression)Visit((ScriptNode)node.From);
            var newPipeToken = (ScriptToken)Visit((ScriptNode)node.PipeToken);
            var newTo = (ScriptExpression)Visit((ScriptNode)node.To);
            return new ScriptPipeCall() { From = newFrom, PipeToken = newPipeToken, To = newTo };
        }

        public override ScriptNode Visit(ScriptRawStatement node)
        {
            return new ScriptRawStatement() { Text = node.Text, SliceIndex = node.SliceIndex, SliceLength = node.SliceLength, EscapeCount = node.EscapeCount };
        }

        public override ScriptNode Visit(ScriptReadOnlyStatement node)
        {
            var newVariable = (ScriptVariable)Visit((ScriptNode)node.Variable);
            return new ScriptReadOnlyStatement() { Variable = newVariable };
        }

        public override ScriptNode Visit(ScriptReturnStatement node)
        {
            var newExpression = (ScriptExpression)Visit((ScriptNode)node.Expression);
            return new ScriptReturnStatement() { Expression = newExpression };
        }

        public override ScriptNode Visit(ScriptTableRowStatement node)
        {
            var newBody = (ScriptBlockStatement)Visit((ScriptNode)node.Body);
            var newVariable = (ScriptExpression)Visit((ScriptNode)node.Variable);
            var newIterator = (ScriptExpression)Visit((ScriptNode)node.Iterator);
            var newNamedArguments = VisitAll(node.NamedArguments);
            return new ScriptTableRowStatement() { Body = newBody, Variable = newVariable, Iterator = newIterator, NamedArguments = newNamedArguments };
        }

        public override ScriptNode Visit(ScriptThisExpression node)
        {
            return new ScriptThisExpression() { };
        }

        public override ScriptNode Visit(ScriptToken node)
        {
            return new ScriptToken() { Value = node.Value };
        }

        public override ScriptNode Visit(ScriptUnaryExpression node)
        {
            var newOperatorToken = (ScriptToken)Visit((ScriptNode)node.OperatorToken);
            var newRight = (ScriptExpression)Visit((ScriptNode)node.Right);
            return new ScriptUnaryExpression() { Operator = node.Operator, OperatorToken = newOperatorToken, Right = newRight };
        }

        public override ScriptNode Visit(ScriptWhenStatement node)
        {
            var newValues = VisitAll(node.Values);
            var newBody = (ScriptBlockStatement)Visit((ScriptNode)node.Body);
            var newNext = (ScriptConditionStatement)Visit((ScriptNode)node.Next);
            return new ScriptWhenStatement() { Values = newValues, Body = newBody, Next = newNext };
        }

        public override ScriptNode Visit(ScriptWhileStatement node)
        {
            var newBody = (ScriptBlockStatement)Visit((ScriptNode)node.Body);
            var newCondition = (ScriptExpression)Visit((ScriptNode)node.Condition);
            return new ScriptWhileStatement() { Body = newBody, Condition = newCondition };
        }

        public override ScriptNode Visit(ScriptWithStatement node)
        {
            var newName = (ScriptExpression)Visit((ScriptNode)node.Name);
            var newBody = (ScriptBlockStatement)Visit((ScriptNode)node.Body);
            return new ScriptWithStatement() { Name = newName, Body = newBody };
        }

        public override ScriptNode Visit(ScriptWrapStatement node)
        {
            var newTarget = (ScriptExpression)Visit((ScriptNode)node.Target);
            var newBody = (ScriptBlockStatement)Visit((ScriptNode)node.Body);
            return new ScriptWrapStatement() { Target = newTarget, Body = newBody };
        }
    }

    public partial class ScriptTableRowStatement
    {
        public override int ChildrenCount => 4;

        protected override ScriptNode GetChildrenImpl(int index)
        {
            return index switch
            {
                0 => Body,
                1 => Variable,
                2 => Iterator,
                3 => NamedArguments,
                _ => null
            };
        }

        public override void Accept(ScriptVisitor visitor) => visitor.Visit(this);
        public override TResult Accept<TResult>(ScriptVisitor<TResult> visitor) => visitor.Visit(this);
    }

    public partial class ScriptThisExpression
    {
        public override int ChildrenCount => 0;

        protected override ScriptNode GetChildrenImpl(int index) => null;
        public override void Accept(ScriptVisitor visitor) => visitor.Visit(this);
        public override TResult Accept<TResult>(ScriptVisitor<TResult> visitor) => visitor.Visit(this);
    }

    public partial class ScriptToken
    {
        public override int ChildrenCount => 0;

        protected override ScriptNode GetChildrenImpl(int index) => null;
        public override void Accept(ScriptVisitor visitor) => visitor.Visit(this);
        public override TResult Accept<TResult>(ScriptVisitor<TResult> visitor) => visitor.Visit(this);
    }

    public partial class ScriptUnaryExpression
    {
        public override int ChildrenCount => 2;

        protected override ScriptNode GetChildrenImpl(int index)
        {
            return index switch
            {
                0 => OperatorToken,
                1 => Right,
                _ => null
            };
        }

        public override void Accept(ScriptVisitor visitor) => visitor.Visit(this);
        public override TResult Accept<TResult>(ScriptVisitor<TResult> visitor) => visitor.Visit(this);
    }

    public partial class ScriptVariableGlobal
    {
        public override int ChildrenCount => 0;

        protected override ScriptNode GetChildrenImpl(int index) => null;
        public override void Accept(ScriptVisitor visitor) => visitor.Visit(this);
        public override TResult Accept<TResult>(ScriptVisitor<TResult> visitor) => visitor.Visit(this);
    }

    public partial class ScriptVariableLocal
    {
        public override int ChildrenCount => 0;

        protected override ScriptNode GetChildrenImpl(int index) => null;
        public override void Accept(ScriptVisitor visitor) => visitor.Visit(this);
        public override TResult Accept<TResult>(ScriptVisitor<TResult> visitor) => visitor.Visit(this);
    }

    public partial class ScriptVariableLoop
    {
        public override int ChildrenCount => 0;

        protected override ScriptNode GetChildrenImpl(int index) => null;
        public override void Accept(ScriptVisitor visitor) => visitor.Visit(this);
        public override TResult Accept<TResult>(ScriptVisitor<TResult> visitor) => visitor.Visit(this);
    }

    public abstract partial class ScriptVisitor
    {
        public virtual void Visit(ScriptAnonymousFunction node) => DefaultVisit(node);
        public virtual void Visit(ScriptArgumentBinary node) => DefaultVisit(node);
        public virtual void Visit(ScriptArrayInitializerExpression node) => DefaultVisit(node);
        public virtual void Visit(ScriptAssignExpression node) => DefaultVisit(node);
        public virtual void Visit(ScriptBinaryExpression node) => DefaultVisit(node);
        public virtual void Visit(ScriptBlockStatement node) => DefaultVisit(node);
        public virtual void Visit(ScriptBreakStatement node) => DefaultVisit(node);
        public virtual void Visit(ScriptCaptureStatement node) => DefaultVisit(node);
        public virtual void Visit(ScriptCaseStatement node) => DefaultVisit(node);
        public virtual void Visit(ScriptContinueStatement node) => DefaultVisit(node);
        public virtual void Visit(ScriptElseStatement node) => DefaultVisit(node);
        public virtual void Visit(ScriptExpressionStatement node) => DefaultVisit(node);
        public virtual void Visit(ScriptForStatement node) => DefaultVisit(node);
        public virtual void Visit(ScriptFunction node) => DefaultVisit(node);
        public virtual void Visit(ScriptFunctionCall node) => DefaultVisit(node);
        public virtual void Visit(ScriptIfStatement node) => DefaultVisit(node);
        public virtual void Visit(ScriptImportStatement node) => DefaultVisit(node);
        public virtual void Visit(ScriptIndexerExpression node) => DefaultVisit(node);
        public virtual void Visit(ScriptIsEmptyExpression node) => DefaultVisit(node);
        public virtual void Visit(ScriptLiteral node) => DefaultVisit(node);
        public virtual void Visit(ScriptMemberExpression node) => DefaultVisit(node);
        public virtual void Visit(ScriptNamedArgument node) => DefaultVisit(node);
        public virtual void Visit(ScriptNestedExpression node) => DefaultVisit(node);
        public virtual void Visit(ScriptNopStatement node) => DefaultVisit(node);
        public virtual void Visit(ScriptObjectInitializerExpression node) => DefaultVisit(node);
        public virtual void Visit(ScriptObjectMember node) => DefaultVisit(node);
        public virtual void Visit(ScriptPage node) => DefaultVisit(node);
        public virtual void Visit(ScriptPipeCall node) => DefaultVisit(node);
        public virtual void Visit(ScriptRawStatement node) => DefaultVisit(node);
        public virtual void Visit(ScriptReadOnlyStatement node) => DefaultVisit(node);
        public virtual void Visit(ScriptReturnStatement node) => DefaultVisit(node);
        public virtual void Visit(ScriptTableRowStatement node) => DefaultVisit(node);
        public virtual void Visit(ScriptThisExpression node) => DefaultVisit(node);
        public virtual void Visit(ScriptToken node) => DefaultVisit(node);
        public virtual void Visit(ScriptUnaryExpression node) => DefaultVisit(node);
        public virtual void Visit(ScriptVariableGlobal node) => DefaultVisit(node);
        public virtual void Visit(ScriptVariableLocal node) => DefaultVisit(node);
        public virtual void Visit(ScriptVariableLoop node) => DefaultVisit(node);
        public virtual void Visit(ScriptWhenStatement node) => DefaultVisit(node);
        public virtual void Visit(ScriptWhileStatement node) => DefaultVisit(node);
        public virtual void Visit(ScriptWithStatement node) => DefaultVisit(node);
        public virtual void Visit(ScriptWrapStatement node) => DefaultVisit(node);
    }

    public abstract partial class ScriptVisitor<TResult>
    {
        public virtual TResult Visit(ScriptAnonymousFunction node) => DefaultVisit(node);
        public virtual TResult Visit(ScriptArgumentBinary node) => DefaultVisit(node);
        public virtual TResult Visit(ScriptArrayInitializerExpression node) => DefaultVisit(node);
        public virtual TResult Visit(ScriptAssignExpression node) => DefaultVisit(node);
        public virtual TResult Visit(ScriptBinaryExpression node) => DefaultVisit(node);
        public virtual TResult Visit(ScriptBlockStatement node) => DefaultVisit(node);
        public virtual TResult Visit(ScriptBreakStatement node) => DefaultVisit(node);
        public virtual TResult Visit(ScriptCaptureStatement node) => DefaultVisit(node);
        public virtual TResult Visit(ScriptCaseStatement node) => DefaultVisit(node);
        public virtual TResult Visit(ScriptContinueStatement node) => DefaultVisit(node);
        public virtual TResult Visit(ScriptElseStatement node) => DefaultVisit(node);
        public virtual TResult Visit(ScriptExpressionStatement node) => DefaultVisit(node);
        public virtual TResult Visit(ScriptForStatement node) => DefaultVisit(node);
        public virtual TResult Visit(ScriptFunction node) => DefaultVisit(node);
        public virtual TResult Visit(ScriptFunctionCall node) => DefaultVisit(node);
        public virtual TResult Visit(ScriptIfStatement node) => DefaultVisit(node);
        public virtual TResult Visit(ScriptImportStatement node) => DefaultVisit(node);
        public virtual TResult Visit(ScriptIndexerExpression node) => DefaultVisit(node);
        public virtual TResult Visit(ScriptIsEmptyExpression node) => DefaultVisit(node);
        public virtual TResult Visit(ScriptLiteral node) => DefaultVisit(node);
        public virtual TResult Visit(ScriptMemberExpression node) => DefaultVisit(node);
        public virtual TResult Visit(ScriptNamedArgument node) => DefaultVisit(node);
        public virtual TResult Visit(ScriptNestedExpression node) => DefaultVisit(node);
        public virtual TResult Visit(ScriptNopStatement node) => DefaultVisit(node);
        public virtual TResult Visit(ScriptObjectInitializerExpression node) => DefaultVisit(node);
        public virtual TResult Visit(ScriptObjectMember node) => DefaultVisit(node);
        public virtual TResult Visit(ScriptPage node) => DefaultVisit(node);
        public virtual TResult Visit(ScriptPipeCall node) => DefaultVisit(node);
        public virtual TResult Visit(ScriptRawStatement node) => DefaultVisit(node);
        public virtual TResult Visit(ScriptReadOnlyStatement node) => DefaultVisit(node);
        public virtual TResult Visit(ScriptReturnStatement node) => DefaultVisit(node);
        public virtual TResult Visit(ScriptTableRowStatement node) => DefaultVisit(node);
        public virtual TResult Visit(ScriptThisExpression node) => DefaultVisit(node);
        public virtual TResult Visit(ScriptToken node) => DefaultVisit(node);
        public virtual TResult Visit(ScriptUnaryExpression node) => DefaultVisit(node);
        public virtual TResult Visit(ScriptVariableGlobal node) => DefaultVisit(node);
        public virtual TResult Visit(ScriptVariableLocal node) => DefaultVisit(node);
        public virtual TResult Visit(ScriptVariableLoop node) => DefaultVisit(node);
        public virtual TResult Visit(ScriptWhenStatement node) => DefaultVisit(node);
        public virtual TResult Visit(ScriptWhileStatement node) => DefaultVisit(node);
        public virtual TResult Visit(ScriptWithStatement node) => DefaultVisit(node);
        public virtual TResult Visit(ScriptWrapStatement node) => DefaultVisit(node);
    }

    public partial class ScriptWhenStatement
    {
        public override int ChildrenCount => 3;

        protected override ScriptNode GetChildrenImpl(int index)
        {
            return index switch
            {
                0 => Values,
                1 => Body,
                2 => Next,
                _ => null
            };
        }

        public override void Accept(ScriptVisitor visitor) => visitor.Visit(this);
        public override TResult Accept<TResult>(ScriptVisitor<TResult> visitor) => visitor.Visit(this);
    }

    public partial class ScriptWhileStatement
    {
        public override int ChildrenCount => 2;

        protected override ScriptNode GetChildrenImpl(int index)
        {
            return index switch
            {
                0 => Body,
                1 => Condition,
                _ => null
            };
        }

        public override void Accept(ScriptVisitor visitor) => visitor.Visit(this);
        public override TResult Accept<TResult>(ScriptVisitor<TResult> visitor) => visitor.Visit(this);
    }

    public partial class ScriptWithStatement
    {
        public override int ChildrenCount => 2;

        protected override ScriptNode GetChildrenImpl(int index)
        {
            return index switch
            {
                0 => Name,
                1 => Body,
                _ => null
            };
        }

        public override void Accept(ScriptVisitor visitor) => visitor.Visit(this);
        public override TResult Accept<TResult>(ScriptVisitor<TResult> visitor) => visitor.Visit(this);
    }

    public partial class ScriptWrapStatement
    {
        public override int ChildrenCount => 2;

        protected override ScriptNode GetChildrenImpl(int index)
        {
            return index switch
            {
                0 => Target,
                1 => Body,
                _ => null
            };
        }

        public override void Accept(ScriptVisitor visitor) => visitor.Visit(this);
        public override TResult Accept<TResult>(ScriptVisitor<TResult> visitor) => visitor.Visit(this);
    }
}